{"version":3,"sources":["components/market/MarketTemplate.tsx","components/shop/ShopItem.tsx","components/shop/ShopItemList.tsx","components/cart/CartItem.tsx","components/cart/CartItemList.tsx","components/market/Market.tsx","App.tsx","serviceWorker.ts","stores/CounterStore.tsx","stores/MarketStore.tsx","index.tsx"],"names":["ShopTemplate","items","this","props","basket","react","row","gutter","col","span","className","React","ShopItem","quantity","_onChange","value","_this","_this2","id","name","price","addCart","tooltip","title","card","bordered","input_number","min","max","defaultValue","onChange","size","es_button","type","shape","icon","onClick","inject","_ref","marketStore","observer","itemList","map","item","ShopItem_ShopItem","Object","assign","key","CartItem","count","total","deleteCart","putCart","state","mode","_changeMode","setState","_saveQuantity","message","success","_renderInputNumber","_renderButton","cartItems","getCart","useEffect","react_default","a","createElement","CartItem_CartItem","cartProduct","divider","Shop","MarketTemplate_ShopTemplate","shop_ShopItemList","cart_CartItemList","App","Market_Shop","Boolean","window","location","hostname","match","CounterStore","observable","action","number","MarketStore","console","log","axios","then","result","setCart","data","catch","err","_this3","find","url","concat","body","JSON","stringify","post","headers","Content-Type","delete","_this4","put","_this5","counterStore","ReactDOM","render","mobx_react_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bd4d161.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport \"../style/MarketTemplate.css\";\r\n\r\nexport interface MarketTemplateProps {\r\n  items?: JSX.Element;\r\n  basket?: JSX.Element;\r\n}\r\n\r\nexport default class ShopTemplate extends React.Component<MarketTemplateProps> {\r\n  public render() {\r\n    const items = this.props.items!;\r\n    const basket = this.props.basket!;\r\n    return (\r\n      <Row gutter={12}>\r\n        <Col span={12}>\r\n          <div className=\"items-wrapper\">\r\n            <h2>상품</h2>\r\n            {items}\r\n          </div>\r\n        </Col>\r\n        <Col span={12}>\r\n          <div className=\"basket-wrapper\">\r\n            <h2>장바구니</h2>\r\n            {basket}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport \"../style/ShopItem.css\";\r\n\r\nimport { InputNumber, Card, Button, Tooltip } from \"antd\";\r\n\r\nexport interface ShopItemProps {\r\n  id?: string;\r\n  name?: string;\r\n  price?: number;\r\n  addCart?: (id: string, name: string, price: number, quantity: number) => void;\r\n}\r\n\r\nexport default class ShopItem extends React.Component<ShopItemProps> {\r\n  quantity: number = 1;\r\n\r\n  _onChange = value => {\r\n    this.quantity = value;\r\n  };\r\n\r\n  public render() {\r\n    const id = this.props.id!;\r\n    const name = this.props.name!;\r\n    const price = this.props.price!;\r\n    const addCart = this.props.addCart!;\r\n    return (\r\n      <div className=\"cardWrapper\">\r\n        <Tooltip title={name}>\r\n          <Card title={name} bordered={false}>\r\n            <div>{price}원</div>\r\n            <div className=\"cardInnerWrapper\">\r\n              <div className=\"cardInner\">\r\n                <InputNumber\r\n                  min={1}\r\n                  max={100}\r\n                  defaultValue={1}\r\n                  onChange={this._onChange}\r\n                  size=\"small\"\r\n                  className=\"inputNumberInShop\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"cardInner\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"circle\"\r\n                  icon=\"shopping-cart\"\r\n                  size=\"small\"\r\n                  onClick={() => addCart(id, name, price, this.quantity)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </Tooltip>\r\n        {/* <h4>{name}</h4>\r\n        <div>{price}원</div>\r\n        <InputNumber\r\n          min={1}\r\n          max={100}\r\n          defaultValue={1}\r\n          onChange={this._onChange}\r\n        /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport ShopItem from \"./ShopItem\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport MOCK_DATA from \"../../MOCK_DATA.json\";\r\n\r\nimport { Col, Row } from \"antd\";\r\n\r\nconst items = MOCK_DATA;\r\n\r\nexport interface ShopItemListProps {\r\n  addCart?: (id: string, name: string, price: number, quantity: number) => void;\r\n}\r\n\r\nconst ShopItemList = (props: ShopItemListProps) => {\r\n  const itemList = items.map(item => (\r\n    // <ShopItem {...item} key={item.name} onPut={props.onPut} />\r\n    <Col span={8}>\r\n      <ShopItem {...item} key={item.id} addCart={props.addCart} />\r\n    </Col>\r\n  ));\r\n  return (\r\n    <div>\r\n      <Row gutter={16}>{itemList}</Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(({ marketStore }) => ({\r\n  addCart: marketStore.addCart\r\n}))(observer(ShopItemList));\r\n","import * as React from \"react\";\r\nimport \"../style/CartItem.css\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport { InputNumber, Button, message } from \"antd\";\r\n\r\nexport interface CartItemProps {\r\n  id?: string;\r\n  name?: string;\r\n  price?: number;\r\n  count?: number;\r\n  total?: number;\r\n  deleteCart?: (id: string) => void;\r\n  putCart?: (id: string, quantity: number) => void;\r\n}\r\n\r\n@observer\r\nexport default class CartItem extends React.Component<CartItemProps> {\r\n  id = this.props.id!;\r\n  name = this.props.name!;\r\n  price = this.props.price!;\r\n  count = this.props.count!;\r\n  total = this.props.total!;\r\n  deleteCart = this.props.deleteCart!;\r\n  putCart = this.props.putCart!;\r\n\r\n  state = {\r\n    mode: false,\r\n    quantity: this.props.count\r\n  };\r\n\r\n  _changeMode = () => {\r\n    this.setState({\r\n      mode: true\r\n    });\r\n  };\r\n\r\n  _onChange = value => {\r\n    this.setState({\r\n      quantity: value\r\n    });\r\n  };\r\n\r\n  _saveQuantity = () => {\r\n    this.setState({\r\n      mode: false\r\n    });\r\n\r\n    if (this.props.id && this.state.quantity)\r\n      this.putCart(this.props.id, this.state.quantity);\r\n\r\n    message.success(\"수량이 변경되었습니다.\");\r\n  };\r\n\r\n  _renderInputNumber = () => {\r\n    if (this.state.mode) {\r\n      return (\r\n        <InputNumber\r\n          min={1}\r\n          max={100}\r\n          defaultValue={this.state.quantity}\r\n          onChange={this._onChange}\r\n          size=\"small\"\r\n          className=\"inputNumberInCart\"\r\n        />\r\n      );\r\n    } else {\r\n      return this.state.quantity;\r\n    }\r\n  };\r\n\r\n  _renderButton = () => {\r\n    if (this.state.mode) {\r\n      return (\r\n        <Button shape=\"round\" size=\"small\" onClick={this._saveQuantity}>\r\n          저장\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button shape=\"round\" size=\"small\" onClick={this._changeMode}>\r\n          수량변경\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"cartItem\">\r\n        <div className=\"name\">{this.name}</div>\r\n        <div className=\"price\">{this.price}원</div>\r\n        <div className=\"count\">\r\n          {this._renderInputNumber()}\r\n          {/* <InputNumber\r\n            min={1}\r\n            max={100}\r\n            defaultValue={count}\r\n            onChange={this._onChange}\r\n            size=\"small\"\r\n            className=\"inputNumberInCart\"\r\n          /> */}\r\n        </div>\r\n        <div className=\"count\">\r\n          {this._renderButton()}\r\n          {/* <Button shape=\"round\" size=\"small\" onClick={this._changeMode}>\r\n            수량변경\r\n          </Button> */}\r\n          {/* <Button\r\n            shape=\"round\"\r\n            size=\"small\"\r\n            onClick={() => putCart(id, this.quantity)}\r\n          >\r\n            수량변경\r\n          </Button> */}\r\n        </div>\r\n        <div className=\"total\">{this.total}원</div>\r\n        <div className=\"return\">\r\n          <Button\r\n            type=\"danger\"\r\n            shape=\"circle\"\r\n            icon=\"delete\"\r\n            size=\"small\"\r\n            onClick={() => this.deleteCart(this.id)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// import * as React from \"react\";\r\nimport React, { useEffect } from \"react\";\r\nimport CartItem from \"./CartItem\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport { Divider } from \"antd\";\r\n\r\ninterface cartListJSON {\r\n  cartProduct: { id: string; name: string; price: number };\r\n  quantity: number;\r\n  total: number;\r\n}\r\n\r\nexport interface CartItemListProps {\r\n  items?: cartListJSON[];\r\n  total?: number;\r\n  getCart?: () => void;\r\n  deleteCart?: (id: string) => void;\r\n  putCart?: (id: string, quantity: number) => void;\r\n}\r\n\r\nconst CartItemList = (props: CartItemListProps) => {\r\n  useEffect(() => {\r\n    if (props.getCart) props.getCart();\r\n  }, []);\r\n\r\n  const itemList = props.items!.map(item => (\r\n    <CartItem\r\n      id={item.cartProduct.id}\r\n      name={item.cartProduct.name}\r\n      price={item.cartProduct.price}\r\n      count={item.quantity}\r\n      total={item.total}\r\n      key={item.cartProduct.id}\r\n      deleteCart={props.deleteCart}\r\n      putCart={props.putCart}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"cartItem\">\r\n        <div className=\"name header\">제품명</div>\r\n        <div className=\"price header\">가격</div>\r\n        <div className=\"count header\">수량</div>\r\n        <div className=\"count header\" />\r\n        <div className=\"total header\">소계</div>\r\n        <div className=\"return header\" />\r\n      </div>\r\n      <Divider />\r\n      {itemList}\r\n      <Divider>총합</Divider>\r\n      <p>{props.total} 원</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(({ marketStore }) => ({\r\n  items: marketStore.cartItems,\r\n  total: marketStore.total,\r\n  getCart: marketStore.getCart,\r\n  deleteCart: marketStore.deleteCart,\r\n  putCart: marketStore.putCart\r\n}))(observer(CartItemList));\r\n","import * as React from \"react\";\r\nimport MarketTemplate from \"./MarketTemplate\";\r\nimport ShopItemList from \"../shop/ShopItemList\";\r\nimport CartItemList from \"../cart/CartItemList\";\r\n\r\nexport default class Shop extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <MarketTemplate items={<ShopItemList />} basket={<CartItemList />} />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n// import Counter from \"./components/counter/Counter\";\nimport Market from \"./components/market/Market\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      {/* <Counter /> */}\n      <Market />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from \"mobx\";\r\n\r\nexport default class CounterStore {\r\n  @observable number: number = 0;\r\n\r\n  @action\r\n  increase = () => {\r\n    this.number++;\r\n  };\r\n\r\n  @action\r\n  decrease = () => {\r\n    this.number--;\r\n  };\r\n}\r\n","import { observable, action } from \"mobx\";\r\nimport axios from \"axios\";\r\n\r\ninterface productListJSON {\r\n  cartProduct: { id: string; name: string; price: number };\r\n  quantity: number;\r\n  total: number;\r\n}\r\n\r\ninterface cartJSON {\r\n  items: productListJSON[];\r\n  total: number;\r\n}\r\n\r\nexport default class MarketStore {\r\n  @observable cartItems: productListJSON[] = [];\r\n  //   @observable selectedItems: Array<itemJSON> = [];     가능;\r\n  @observable total: number = 0;\r\n\r\n  @action\r\n  getCart = () => {\r\n    console.log(\"getCart 실행\");\r\n    axios(`/gun`)\r\n      .then(result => {\r\n        this.setCart(result.data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  @action\r\n  setCart = (data: cartJSON) => {\r\n    this.total = data.total;\r\n    this.cartItems = data.items;\r\n  };\r\n\r\n  @action\r\n  addCart = (id: string, name: string, price: number, quantity: number) => {\r\n    const exists = this.cartItems.find(item => item.cartProduct.id === id);\r\n    if (exists) return;\r\n\r\n    console.log(\"addCart 실행\");\r\n\r\n    const url = `/gun/${quantity}`;\r\n    const body = JSON.stringify({\r\n      id: id,\r\n      name: name,\r\n      price: price\r\n    });\r\n    const header = { headers: { \"Content-Type\": \"application/json\" } };\r\n\r\n    axios\r\n      .post(url, body, header)\r\n      .then(() => {\r\n        this.getCart();\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  @action\r\n  deleteCart = (id: string) => {\r\n    console.log(\"deleteCart 실행\");\r\n\r\n    const url = `/gun/${id}`;\r\n\r\n    axios\r\n      .delete(url)\r\n      .then(() => {\r\n        this.getCart();\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  @action\r\n  putCart = (id: string, quantity: number) => {\r\n    console.log(\"putCart 실행\");\r\n\r\n    const url = `/gun/${id}/${quantity}`;\r\n\r\n    axios\r\n      .put(url)\r\n      .then(() => {\r\n        this.getCart();\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"mobx-react\";\nimport CounterStore from \"./stores/CounterStore\"; // 스토어 import\nimport MarketStore from \"./stores/MarketStore\"; // 스토어 import\n\nconst counterStore = new CounterStore(); // 스토어 인스턴스 생성\nconst marketStore = new MarketStore(); // 스토어 인스턴스 생성\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <Provider counterStore={counterStore} marketStore={marketStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}